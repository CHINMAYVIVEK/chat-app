// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/homefeed.proto

package homefeed

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HomeFeedServiceClient is the client API for HomeFeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeFeedServiceClient interface {
	HomeFeed(ctx context.Context, in *HomeFeedRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type homeFeedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeFeedServiceClient(cc grpc.ClientConnInterface) HomeFeedServiceClient {
	return &homeFeedServiceClient{cc}
}

func (c *homeFeedServiceClient) HomeFeed(ctx context.Context, in *HomeFeedRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/homefeed.HomeFeedService/HomeFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeFeedServiceServer is the server API for HomeFeedService service.
// All implementations must embed UnimplementedHomeFeedServiceServer
// for forward compatibility
type HomeFeedServiceServer interface {
	HomeFeed(context.Context, *HomeFeedRequest) (*httpbody.HttpBody, error)
	mustEmbedUnimplementedHomeFeedServiceServer()
}

// UnimplementedHomeFeedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHomeFeedServiceServer struct {
}

func (UnimplementedHomeFeedServiceServer) HomeFeed(context.Context, *HomeFeedRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomeFeed not implemented")
}
func (UnimplementedHomeFeedServiceServer) mustEmbedUnimplementedHomeFeedServiceServer() {}

// UnsafeHomeFeedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeFeedServiceServer will
// result in compilation errors.
type UnsafeHomeFeedServiceServer interface {
	mustEmbedUnimplementedHomeFeedServiceServer()
}

func RegisterHomeFeedServiceServer(s grpc.ServiceRegistrar, srv HomeFeedServiceServer) {
	s.RegisterService(&HomeFeedService_ServiceDesc, srv)
}

func _HomeFeedService_HomeFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeFeedServiceServer).HomeFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homefeed.HomeFeedService/HomeFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeFeedServiceServer).HomeFeed(ctx, req.(*HomeFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HomeFeedService_ServiceDesc is the grpc.ServiceDesc for HomeFeedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeFeedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "homefeed.HomeFeedService",
	HandlerType: (*HomeFeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HomeFeed",
			Handler:    _HomeFeedService_HomeFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/homefeed.proto",
}
